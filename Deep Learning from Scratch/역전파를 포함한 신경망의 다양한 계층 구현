{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3337298b",
   "metadata": {},
   "source": [
    "# 신경망의 활성화함수,행렬곱 계층 구현하기\n",
    "- 신경망을 구성하는 계층, 다양한 기능을 하는 계층을 각각 클래스로 구현한다"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "230e2d64",
   "metadata": {},
   "source": [
    "### 활성화 함수 계층 구현하기\n",
    "- ReLU 함수\n",
    "- 노드 사이에 스칼라값이 흐르는 간단한 계층 구현"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "9e4c1633",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# forward는 넘파이 배열을 인수로 받는다\n",
    "# mask 변수에는 입력된 넘파이 배열에 bool 정보가 대신 들어가 있다.\n",
    "class ReLU:\n",
    "    def __init__(self):\n",
    "        self.mask = None\n",
    "\n",
    "    def forward(self,x):\n",
    "        self.mask = (x <= 0) # x 배열 내에 0보다 작은 원소에 대해 True 부여\n",
    "        out = x.copy() \n",
    "        out[mask] = 0 # x 배열 내에 0보다 작은 원소에는 0을 부여한다\n",
    "        return out\n",
    "    \n",
    "    def backward(self,dout):\n",
    "        dout[self.mask] = 0 # 입력값이 0보다 작은 경우는 역전파의 출력이 0, 0보다 큰 경우에는 역전파 그대로 출력\n",
    "        return dout"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e57f745",
   "metadata": {},
   "source": [
    "### 활성화 함수 계층 구현하기\n",
    "- Sigmoid 함수(간소화 버전)\n",
    "- 노드 사이에 스칼라값이 흐르는 간단한 계층 구현"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c02a3173",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 시그모이드 함수의 연산을 한번에 묶어서 간소화한 Sigmoid 함수의 계층을 구현할 수 있다\n",
    "\n",
    "class Sigmoid_simple:\n",
    "    def __init__(self):\n",
    "        self.out = None # Sigmoid의 역전파는 순전파 출력값으로만 계산할 수 있다\n",
    "        \n",
    "    def forward(self,x):\n",
    "        self.out = 1 / (1+np.exp(-x))\n",
    "        return self.out\n",
    "        \n",
    "    def backward(self,dout):\n",
    "        dx = dout*(self.out)*(1-self.out)\n",
    "        return dx"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8867b8b",
   "metadata": {},
   "source": [
    "### 활성화 함수 계층 구현하기\n",
    "- Sigmoid 함수(간소화 버전)\n",
    "- 시그모이드 함수의 연산을 계산 그래프로 하나하나 구현할 수 있다\n",
    "- 기존의 사용했던 곱셈계층, 덧셈계층에 이어서 나눗셈계층, exp계층을 추가할 수 있다.\n",
    "- 나눗셈계층과 exp 계층 구현해보기\n",
    "- 노드 사이에 스칼라값이 흐르는 간단한 계층 구현"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6ea527b1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class divisionLayer:\n",
    "    def __init__(self):\n",
    "        self.out = None # 나눗셈 계층의 역전파는 출력값 ** 2 에 - 를 붙인 것\n",
    "    \n",
    "    def forward(self,x):\n",
    "        if x != 0: # zero division error 방지\n",
    "            self.out = 1/x\n",
    "            return self.out\n",
    "    \n",
    "    def backward(self,dout):\n",
    "        dx = dout *  (- (self.out)**2)\n",
    "        return dx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f1ac197d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-2.0\n"
     ]
    }
   ],
   "source": [
    "dv_layer = divisionLayer()\n",
    "exp = dv_layer.forward(1)\n",
    "print(dv_layer.backward(2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f9164df6",
   "metadata": {},
   "outputs": [],
   "source": [
    "class expLayer:\n",
    "    def __init__(self):\n",
    "        self.out = None # exp 계층의 역전파는 순전파 출력값을 그대로 곱한 것\n",
    "        \n",
    "    def forward(self,x):\n",
    "        self.out = np.exp(x)\n",
    "        return self.out\n",
    "    \n",
    "    def backward(self,dout):\n",
    "        dx = dout * self.out\n",
    "        return dx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "d090147b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5.43656365691809"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "exp_layer = expLayer()\n",
    "exp_layer.forward(1)\n",
    "exp_layer.backward(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ad9cd5e",
   "metadata": {},
   "source": [
    "### Affine/Softmax 함수 계층 구현하기\n",
    "- 노드 사이에서 스칼라값이 흐르던 앞선 구현과 달리, 노드 사이에 행렬이 흐른다\n",
    "- 역전파 구현시, 행렬의 형상에 주의해야 한다. 행렬의 곱에서는 대응하는 차원의 원소수가 일치해야하기 때문이다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0ffcdd94",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X :  [0.26831188 0.43885052]\n",
      "W :  [[0.44697763 0.79231776 0.43770828]\n",
      " [0.97050727 0.62366689 0.13089167]]\n",
      "B :  [0.68460115 0.00747681 0.04261928]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1.23043817, 0.49376162, 0.21750349])"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 입력데이터 X가 1차원 배열인 경우\n",
    "X = np.random.rand(2)\n",
    "print(\"X : \",X)\n",
    "W = np.random.rand(2,3)\n",
    "print(\"W : \",W)\n",
    "B = np.random.rand(3)\n",
    "print(\"B : \",B)\n",
    "\n",
    "Y = np.dot(X,W) + B\n",
    "Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6e8e680b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X :  [[0.45828216 0.38546584]\n",
      " [0.16666418 0.49801699]]\n",
      "W :  [[0.08067526 0.67812068 0.74333135]\n",
      " [0.71770158 0.05247116 0.56744003]]\n",
      "B :  [0.03896819 0.15032666 0.25130746]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.35258967, 0.48132311, 0.8106917 ],\n",
       "       [0.40984145, 0.28947662, 0.65778895]])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 입력데이터 X가 2차원 배열인 경우\n",
    "X = np.random.rand(2,2)\n",
    "print(\"X : \",X)\n",
    "W = np.random.rand(2,3)\n",
    "print(\"W : \",W)\n",
    "B = np.random.rand(3)\n",
    "print(\"B : \",B)\n",
    "\n",
    "Y = np.dot(X,W) + B\n",
    "Y"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4119eacf",
   "metadata": {},
   "source": [
    "### Affine 함수 계층 구현하기\n",
    "- 2차원 배열이 흐르는 경우 행렬곱 계층의 구현"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "b7d98a4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "class Affine:\n",
    "    def __init__(self,W,b):\n",
    "        self.W = W\n",
    "        self.b = b\n",
    "        self.x = None\n",
    "        self.dW = None\n",
    "        self.db = None\n",
    "    \n",
    "    def forward(self,x):\n",
    "        self.x = x\n",
    "        out = np.dot(x,self.W) + self.b\n",
    "        \n",
    "        return out # 출력값이 저장될 필요가 없기 때문에 out은 보관될 필요가 없다\n",
    "    \n",
    "    def backward(self,dout):\n",
    "        dx = np.dot(dout,self.W.T)\n",
    "        self.db = np.sum(dout + b,axis=0)\n",
    "        self.dW = np.dot(self.x.T,dout)\n",
    "        return dx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1c78f4c9",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
